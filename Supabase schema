-- Enable UUID extension
create extension if not exists "uuid-ossp";

-- Create custom types
create type user_role as enum ('admin', 'user');

-- Create tables
create table public.profiles (
  id uuid references auth.users on delete cascade primary key,
  email text unique not null,
  full_name text,
  avatar_url text,
  role user_role default 'user'::user_role,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.snippets (
  id uuid default uuid_generate_v4() primary key,
  title text not null,
  description text,
  code text not null,
  language text not null,
  user_id uuid references auth.users on delete cascade not null,
  is_public boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.tags (
  id uuid default uuid_generate_v4() primary key,
  name text not null unique,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.snippet_tags (
  snippet_id uuid references snippets on delete cascade,
  tag_id uuid references tags on delete cascade,
  primary key (snippet_id, tag_id)
);

create table public.snippet_versions (
  id uuid default uuid_generate_v4() primary key,
  snippet_id uuid references snippets on delete cascade not null,
  code text not null,
  version_number integer not null,
  comment text,
  user_id uuid references auth.users on delete cascade not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create indexes
create index snippets_user_id_idx on snippets(user_id);
create index snippet_versions_snippet_id_idx on snippet_versions(snippet_id);
create index tags_name_idx on tags(name);

-- Enable Row Level Security
alter table profiles enable row level security;
alter table snippets enable row level security;
alter table tags enable row level security;
alter table snippet_tags enable row level security;
alter table snippet_versions enable row level security;

-- Create policies
-- Profiles policies
create policy "Public profiles are viewable by everyone"
  on profiles for select
  using (true);

create policy "Users can insert their own profile"
  on profiles for insert
  with check (auth.uid() = id);

create policy "Users can update their own profile"
  on profiles for update
  using (auth.uid() = id);

-- Snippets policies
create policy "Public snippets are viewable by everyone"
  on snippets for select
  using (is_public = true or auth.uid() = user_id);

create policy "Users can insert their own snippets"
  on snippets for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own snippets"
  on snippets for update
  using (auth.uid() = user_id);

create policy "Users can delete their own snippets"
  on snippets for delete
  using (auth.uid() = user_id);

-- Tags policies
create policy "Tags are viewable by everyone"
  on tags for select
  using (true);

create policy "Users can insert tags"
  on tags for insert
  with check (true);

-- Snippet tags policies
create policy "Snippet tags are viewable by everyone"
  on snippet_tags for select
  using (true);

create policy "Users can insert snippet tags for their snippets"
  on snippet_tags for insert
  with check (
    exists (
      select 1 from snippets
      where id = snippet_id and user_id = auth.uid()
    )
  );

create policy "Users can delete snippet tags for their snippets"
  on snippet_tags for delete
  using (
    exists (
      select 1 from snippets
      where id = snippet_id and user_id = auth.uid()
    )
  );

-- Snippet versions policies
create policy "Users can view versions of accessible snippets"
  on snippet_versions for select
  using (
    exists (
      select 1 from snippets
      where id = snippet_id and (is_public or user_id = auth.uid())
    )
  );

create policy "Users can insert versions to their snippets"
  on snippet_versions for insert
  with check (auth.uid() = user_id);

-- Functions
create or replace function handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, full_name)
  values (new.id, new.email, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$ language plpgsql security definer;

-- Triggers
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure handle_new_user();

-- Update timestamps trigger
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger handle_updated_at
  before update on snippets
  for each row execute procedure update_updated_at_column();

create trigger handle_updated_at
  before update on profiles
  for each row execute procedure update_updated_at_column();